{"version":3,"sources":["components/navbar.js","components/screens/home.js","components/screens/login.js","components/screens/signup.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","id","Home","Login","useState","email","setEmail","password","setPassword","history","useHistory","type","placeholder","value","onChange","e","target","onClick","test","fetch","method","headers","body","JSON","stringify","then","res","json","data","console","log","error","M","toast","html","classes","localStorage","setItem","token","user","push","catch","err","Signup","name","setName","message","App","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.095e4818.chunk.js","sourcesContent":["import React from 'react'\r\nimport {Link} from 'react-router-dom'\r\n\r\nconst Navbar =()=>{\r\n\r\n\r\n    return(\r\n        <nav>\r\n    <div className=\"nav-wrapper\" >\r\n      <Link to=\"/\" className=\"brand-logo left\">Login Page</Link>\r\n      <ul id=\"nav-mobile\" className=\"right\">\r\n        <li><Link to=\"/login\">Login</Link></li>\r\n        <li><Link to=\"/signup\">Signup</Link></li>\r\n        \r\n      </ul>\r\n    </div>\r\n  </nav>\r\n    )\r\n}\r\nexport default Navbar","import React from 'react'\r\n  \r\nconst Home =()=>{\r\n\r\n    return(\r\n        <h1>Home</h1>\r\n    )\r\n\r\n}\r\nexport default Home","import React,{useState} from 'react'\r\nimport {Link,useHistory} from 'react-router-dom'\r\nimport M from 'materialize-css'\r\n\r\n\r\n\r\nconst Login =()=>{\r\n    const [email,setEmail]=useState(\"\")\r\n    const [password,setPassword]=useState(\"\")\r\n    const history =useHistory()\r\n    const postdata =()=>{\r\n        if(email){\r\n        if(!/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email)){\r\n            M.toast({html: \"invalid email\",classes:\"#c62828 red darken-3\"})\r\n            return\r\n        }\r\n    }\r\n        fetch('http://localhost:4000/signin',{\r\n            method:\"post\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\"\r\n            \r\n            },\r\n            body: JSON.stringify({\r\n                \r\n                email:email,\r\n                password:password\r\n            })\r\n\r\n            }).then(res=>res.json())\r\n             .then(data=>{\r\n                 console.log(data)\r\n                 if(data.error){\r\n                 M.toast({html:data.error,classes:\"#c62828 red darken-3\"})\r\n                 }\r\n                 else{\r\n                     localStorage.setItem(\"jwt\",data.token)\r\n                     localStorage.setItem(\"user\",JSON.stringify(data.user))\r\n                     M.toast({html:\"login successful\",classes:\"#00897b teal darken-1\"})\r\n                \r\n                     history.push(\"/\")\r\n                 }\r\n             })\r\n             .catch(err=>{\r\n                 console.log(err)\r\n             })\r\n       \r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"card auth-card input-field\">\r\n            <h2>Profile Searcher</h2>\r\n            <input\r\n            type=\"text\"\r\n            placeholder=\"email\"\r\n            value ={email}\r\n            onChange={e=>{setEmail(e.target.value)}}\r\n        \r\n            />\r\n            <input\r\n            type=\"password\"\r\n            placeholder=\"password\"\r\n            value ={password}\r\n            onChange={e=>{setPassword(e.target.value)}}\r\n            \r\n            />\r\n\r\n            <button className=\"btn waves-effect waves-light #64b5f6 blue darken-1\"\r\n                    onClick={()=>postdata()}\r\n        \r\n        \r\n            >\r\n                Login\r\n            </button>\r\n            <h5>\r\n                <Link to=\"/signup\">Dont have an account ?</Link>\r\n            </h5>\r\n            <h6>\r\n                <Link to=\"/reset\">Forgot password ?</Link>\r\n            </h6>\r\n            \r\n    \r\n        </div>\r\n      </div>\r\n        \r\n    )\r\n\r\n}\r\nexport default Login","import React,{useState} from 'react'\r\nimport {Link,useHistory} from 'react-router-dom'\r\nimport M from 'materialize-css'\r\n\r\n\r\nconst Signup =()=>{\r\n    const [name,setName]=useState(\"\")\r\n    const [email,setEmail]=useState(\"\")\r\n    const [password,setPassword]=useState(\"\")\r\n    const history =useHistory()\r\n    const postdata =()=>{\r\n        if(email){\r\n        if(!/^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email)){\r\n            M.toast({html: \"invalid email\",classes:\"#c62828 red darken-3\"})\r\n            return\r\n        }\r\n    }\r\n        fetch('http://localhost:4000/signup',{\r\n            method:\"post\",\r\n            headers:{\r\n                \"Content-Type\":\"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                name:name,\r\n                email:email,\r\n                password:password\r\n            })\r\n\r\n            }).then(res=>res.json())\r\n             .then(data=>{\r\n                 if(data.error){\r\n                 M.toast({html:data.error,classes:\"#c62828 red darken-3\"})\r\n                 }\r\n                 else{\r\n                     M.toast({html:data.message,classes:\"#00897b teal darken-1\"})\r\n                \r\n                     history.push(\"/login\")\r\n                 }\r\n             })\r\n             .catch(err=>{\r\n                 console.log(err)\r\n             })\r\n       \r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"card auth-card input-field\">\r\n            <h2>Profile Searcher</h2>\r\n            <input\r\n            type=\"text\"\r\n            placeholder=\"name\"\r\n            value ={name}\r\n            onChange={e=>{setName(e.target.value)}}\r\n        \r\n            />\r\n            <input\r\n            type=\"text\"\r\n            placeholder=\"email\"\r\n            value ={email}\r\n            onChange={e=>{setEmail(e.target.value)}}\r\n        \r\n            />\r\n            <input\r\n            type=\"password\"\r\n            placeholder=\"password\"\r\n            value ={password}\r\n            onChange={e=>{setPassword(e.target.value)}}\r\n            \r\n            />\r\n            <button className=\"btn waves-effect waves-light #64b5f6 blue darken-1\"\r\n            onClick={()=>postdata()}\r\n        \r\n            >\r\n                SIGNUP\r\n            </button>\r\n            <h5>\r\n                <Link to=\"/login\">Already have an account ?</Link>\r\n            </h5>\r\n            \r\n    \r\n        </div>\r\n      </div>\r\n        \r\n    )\r\n\r\n}\r\nexport default Signup","import React from 'react';\nimport Navbar from './components/navbar'\nimport './App.css'\n\nimport {BrowserRouter,Route} from 'react-router-dom'\nimport Home from './components/screens/home'\nimport Login from './components/screens/login'\nimport Signup from './components/screens/signup'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n      <Navbar/>\n\n      \n      <Route exact path=\"/\"><Home /></Route>\n      <Route path=\"/login\"><Login /></Route>\n      <Route path=\"/signup\"><Signup /></Route>\n\n      </BrowserRouter>\n     \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}